#+TITLE: TP3 - Simulation
#+AUTHOR: Rémi CHASSAGNOL
#+setupfile: ~/.emacs.d/emacs-config/org-setup-files/df-standard.org
#+LATEX_HEADER: \usepackage{placeins}
#+DATE: TODO
#+OPTIONS: toc:nil title:nil

#+LATEX_HEADER: \usepackage{multicol}
#+begin_export latex
\begin{titlepage}
\begin{center}
    
    \textsc{\LARGE TP}\\[0.5cm]
    
    {\huge \bfseries Monte Carlo Simulation et intervalles de confiances\\[2cm]}

      \centering
      \includegraphics[scale=0.25]{./img/banner.png}

      \vspace*{\fill}

    \begin{multicols}{2}
      \large
      CHASSAGNOL Rémi\\
      ZZ2 - F2 - promo24\\[2cm]

      \columnbreak

      \large
      \emph{Professeur:} HILL Davide\\
    \end{multicols}

    \textsc{7 octobre 2022}

  \end{center}
\end{titlepage}

\clearpage
\tableofcontents
\clearpage
#+end_export

* Simulation de $\pi$

Le but de cette première partie est de déterminer une valeur approchée de $\pi$
en utilisant une méthode de *Monte Carlo*. Le principe est le suivant:

#+CAPTION: Simulation $\pi$ Monte Carlo
[[./img/monteCarloPi.png]]
[fn:: Figure 1: https://media.eduscol.education.fr/ftp_eduscol/2019/Ressources/Mathematiques/RA19_Lycee_G_1_MATH_Algorithmique_et_Programmation_activite_11.html]

\FloatBarrier

On tire deux nombres aléatoires $x$ et $y$, compris entre 0 et 1, à l'aide de
*Mecene Twister*. Ces deux nombres sont les coordonnées d'un point appartenant
un à espace représenté par un carré de coté 1.

Ensuite, on teste si $x^{2} + y^{2} < 1$, si c'est le cas, cela signifie que le
point trouvé se trouve dans le quart de cercle de rayon 1 situé à l’intérieur de
notre carré comme ci-dessus. À la fin on fait le rapport du nombre de points
trouvés dans le quart de cercle sur le nombre de points total et on obtient une
valeur approchée de $\frac{\pi}{4}$. Là il suffit de multiplier par 4 pour
trouver $\pi$.

\clearpage

Pour l'implémentation, on va utiliser =genrand_real1()= pour avoir des nombres
aléatoire dans $[0;1]$ et on suit les étapes expliquées précédemment. La
fonction prend en paramètre le nombre de points à générer. Comme Mercene
Twister est un bon générateur qui explore bien l'espace, plus on génère de
points, plus on couvre l'espace et ce de manière /"uniforme"/. De ce fait, plus on
augmente le nombre de points générés, plus la précision augmente.

#+BEGIN_SRC C
double simPi(unsigned int nbPoints) {
  unsigned int pointsInCircle = 0;
  unsigned int i;
  double       x, y;

  for (i = 0; i < nbPoints; ++i) {
    x = genrand_real1();
    y = genrand_real1();

    if (x * x + y * y < 1) {
      pointsInCircle++;
    }
  }

  return (double)(4 * pointsInCircle) / nbPoints;
}
#+END_SRC

Voici le résultat pour différents nombres de générations:

| points générés | valeur de \pi trouvée |
|----------------+-----------------------|
|           1000 |              3.124000 |
|        1000000 |              3.144720 |
|     1000000000 |              3.141541 |

On constate bien que plus on génère de points, plus on se rapproche de la valeur
de $\pi$.

\clearpage

* Calcul de précision

Dans cette deuxième partie, on va réutiliser la fonction =simPi()= implémentée
précédemment, et on va s’intéresser à la précision. Le but va être de calculer
une moyenne sur un certain nombre de simulation de $\pi$. Pour chacune des
moyennes, la simulation se fera avec différents nombres de points à
générer. Ensuite, on compare la valeur de $\pi$ trouvée (en moyenne) avec =M_PI=
qui est une macro de =math.h= qui contient une valeur relativement précise de
$\pi$. \newline{}

Notre fonction =simPiPrecisison()= va donc prendre deux paramètres:
- =nbPoints=: le nombre de points à générer avec =simPi()=
- =nbSimulations=: le nombre d'expériences à effectuer pour le calcule de la moyenne

La fonction affiche simplement le pourcentage de différence entre la valeur de
$\pi$ simulée et =M_PI=. A noter qu'on initialise bien *Mercene Twister* à chaque
fois car on souhaite répéter la même expérience, on ne change que le nombre de
points générés par =simPi()=.

#+BEGIN_SRC C
void simPiErreur(unsigned int nbPoints, int nbSimulations) {
  int    i;
  double mean;
  double sum = 0;

  initMT();

  // calcul des pis
  for (i = 0; i < nbSimulations; ++i) {
    sum += simPi(nbPoints);
  }
  mean = sum / nbSimulations;

  printf("%lf\t", mean);
  printf("%.10lf\n", fabs(mean - M_PI) / M_PI);
}
#+END_SRC

Voici les résultats pour des moyennes calculées sur 40 échantillons, on constate
à nouveau que plus on génère de points plus la précision augmente.

| points générés |  moyenne |   erreur |
|----------------+----------+----------|
|           1000 | 3.142400 | 0.000257 |
|        1000000 | 3.141186 | 0.000129 |
|     1000000000 | 3.141586 | 0.000002 |

On calcule maintenant l'erreur pour $\textbf{10, 11, ..., 39, 40}$ échantillons
et $\textbf{1000000000}$ points générés. Si on normalise les données obtenues
(pour plus de lisibilité) et qu'on fait de la régression linéaire on obtient la
droite suivante:

#+CAPTION: Erreur en fonction du nombre d'échantillons
[[./img/simu-precision.png]]

\FloatBarrier

On voit bien que la droite ci dessus a une pente de presque $-\frac{1}{2}$ ce
qui montre bien que pour doubler la précision (diviser l'erreur par 2), il faut
multiplier le nombre d'échantillons par 4.

* Calcul d'intervalles de confiance à 95%

Dans cette dernier partie, on va écrire une fonction qui permet de calculer et
d'afficher l'intervalle de confiance à 95% pour les moyennes simulées
précédemment. Pour ce faire on commence par calculer la moyenne arithmétique
$\overline{X}(n)$ sur un certain nombre de simulations de $\pi$. En même temps,
on sauvegarde les valeurs de $\pi$ trouvées dans un tableau car on en aura
besoin par la suite. Ensuite on utilise la moyennes et le tableaux de valeurs de
$\pi$ pour calculer $S^{2}(n) = \frac{\sum_{i = 1}^{n}{(X_{i} -
\overline{X}(n))^{2}}}{n - 1}$, qui est un estimateur sans biais de la
variance. Enfin on utilise une loi de Student pour calculer le taux d'erreur $R
= t_{n-1,1 - \frac{\alpha}{2}}\times\sqrt{\frac{S^{2}(n)}{n}}$. En utilisant le
taux d’erreurs trouvé, on peut calculer les bornes de l’intervalle de confiance
à 95% $[\overline{X} - R, \overline{X} + R]$. \newline{}

La fonction prend en entrée 2 paramètres, =nbPoints= (nombre de points à générer
pour =simPi()=) et =n= (nombre d'expériences). On commence par générer =n= valeurs de
$\pi$ et on stocke les résultats dans un tableau. Dans le même temps on calcule
la somme des valeurs générées pour le calcul de la moyenne. Après avoir calculer
la moyenne, on peux calculer l'estimateur =s2n=. Enfin on calcule R, sachant que
les 30 premiers coefficients de Student sont stockés dans le tableau globale
=student=. À la fin on affiche l'intervalle.

\clearpage

#+BEGIN_SRC C
void intervalleConfiance(unsigned int nbPoints, int n) {
  int    i;
  double pis[30] = {0};
  double mean;
  double sum = 0;
  double sumSn = 0, s2n;
  double tmp;
  double r;

  initMT();

  // calcul des pis
  for (i = 0; i < n; ++i) {
    pis[i] = simPi(nbPoints);
    sum += pis[i];
  }
  mean = sum / n; // calcul de la moyenne

  // Calcul de S²(n)
  for (i = 0; i < n; ++i) {
    tmp = pis[i] - mean;
    sumSn += tmp * tmp;
  }
  s2n = sumSn / (n - 1);

  r = student[n - 1] * sqrt(s2n / n);

  printf("intervalle de confiance: [%lf; %lf].\n", mean - r, mean + r);
}
#+END_SRC

On trouve les résultats suivant:

- Pour *30* échantillons et *1000* points.
    - taux d'erreur: ~0.016745~
    - intervalle de confiance: ~[3.122988; 3.156479]~.
- Pour *30* échantillons et *1000000* points.
    - taux d'erreur: ~0.000651~
    - intervalle de confiance: ~[3.140491; 3.141794]~.
- Pour *30* échantillons et *1000000000* points.
    - taux d'erreur: ~0.000019~
    - intervalle de confiance: ~[3.141565; 3.141604]~.


Ces résultats sont cohérent par rapport au cours, on constate que plus on
utilise de points pour générer $\pi$ plus la variance est faible et donc plus
l'intervalle de confiance est petit.
